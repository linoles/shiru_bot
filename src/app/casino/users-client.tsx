'use client'

import { useEffect, useRef, useState } from 'react'
import "@/src/app/globals.css";
import { CasinoProps, Points_from, User } from '../users-client';

declare global {
  interface Window {
    Telegram: any
  }
}

export default function ClientComponent({ initialUsers }: { initialUsers: User[] }) {
  const [users, setUsers] = useState<User[]>(initialUsers);
  const [curUser, setCurUser] = useState<User>({ tgId: 0, tgNick: '', tgUsername: '', points: 0, lvl: 1, points_from: { rsp: 0, casino: 0, emoji: 0, distribute: 0, feud: 0 }, casinoBet: 100, lastFreeCasino: 0, freeCasinoNow: false, freeCasinoProps: { done: 0, points: 0 }, rspProps: { enemy: 0, choice: null } });
  const [tgData, setTgData] = useState<any>(null);

  const symbols = ['üçá', 'üçã', 'BAR', '7Ô∏è‚É£'];
  const rand_choices = ["üçÄ", "üçÄ", "üçÄ"];
  const payouts: { [key: string]: number } = {
    "7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£": 64,
    "üçãüçãüçã": 43,
    "üçáüçáüçá": 22,
    "BARBARBAR": 1,
    "7Ô∏è‚É£7Ô∏è‚É£BAR": 16,
    "7Ô∏è‚É£7Ô∏è‚É£üçá": 32,
    "7Ô∏è‚É£7Ô∏è‚É£üçã": 48,
    "üçãüçã7Ô∏è‚É£": 59,
    "BARüçá7Ô∏è‚É£": 53,
    "üçáüçã7Ô∏è‚É£": 58,
    "üçáüçãüçã": 42,
    "7Ô∏è‚É£üçã7Ô∏è‚É£": 60,
    "üçãüçáüçá": 23,
    "üçáBARBAR": 2,
    "BARüçáüçã": 37,
    "7Ô∏è‚É£üçáüçã": 40,
    "üçá7Ô∏è‚É£BAR": 14,
    "7Ô∏è‚É£üçãüçá": 28,
    "BARBARüçã": 33,
    "üçãüçãBAR": 11,
    "BARüçáüçá": 21,
    "üçá7Ô∏è‚É£7Ô∏è‚É£": 62,
    "BARüçãBAR": 9,
    "üçáBAR7Ô∏è‚É£": 50,
    "üçãBARüçã": 35,
    "7Ô∏è‚É£üçá7Ô∏è‚É£": 56,
    "üçãüçá7Ô∏è‚É£": 55,
    "7Ô∏è‚É£üçáüçá": 24,
    "üçãBAR7Ô∏è‚É£": 51,
    "üçáüçãüçá": 26,
    "7Ô∏è‚É£üçãüçã": 44,
    "üçãBARBAR": 3,
    "BARBAR7Ô∏è‚É£": 49,
    "BAR7Ô∏è‚É£BAR": 13,
    "BARüçã7Ô∏è‚É£": 57,
    "üçã7Ô∏è‚É£üçá": 31,
    "üçãüçãüçá": 27,
    "üçáBARüçã": 34,
    "üçá7Ô∏è‚É£üçã": 46,
    "BAR7Ô∏è‚É£üçá": 29,
    "7Ô∏è‚É£üçáBAR": 8,
    "üçáüçáBAR": 6,
    "BARüçáBAR": 5,
    "BAR7Ô∏è‚É£7Ô∏è‚É£": 61,
    "üçáüçá7Ô∏è‚É£": 54,
    "üçá7Ô∏è‚É£üçá": 30,
    "üçã7Ô∏è‚É£BAR": 15,
    "BAR7Ô∏è‚É£üçã": 45,
    "üçã7Ô∏è‚É£üçã": 47,
    "üçã7Ô∏è‚É£7Ô∏è‚É£": 63,
    "üçáüçãBAR": 10,
    "7Ô∏è‚É£üçãBAR": 12,
    "7Ô∏è‚É£BARüçã": 36,
    "üçãüçáBAR": 7,
    "BARüçãüçã": 41,
    "BARBARüçá": 17,
    "7Ô∏è‚É£BARBAR": 4,
    "üçáüçáüçã": 38,
    "üçãBARüçá": 19,
    "üçãüçáüçã": 39,
    "7Ô∏è‚É£BAR7Ô∏è‚É£": 52,
    "7Ô∏è‚É£BARüçá": 20,
    "üçáBARüçá": 18
  }

  let [res, setRes] = useState("x1 (=0$)");
  let [resColor, setResColor] = useState("stone");
  let [int, setInt] = useState(rand_choices.map((choice, index) => (<div key={index} className={`h-[30vw] w-[30vw] bg-card rounded-3xl text-5xl flex items-center justify-center ${choice}`}><img src={`${choice}.png`} className="w-[60%]"></img></div>)));
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (scrollContainerRef.current) {
      const scrollWidth = scrollContainerRef.current.scrollWidth;
      const clientWidth = scrollContainerRef.current.clientWidth;
      scrollContainerRef.current.scrollLeft = (scrollWidth - clientWidth) / 2;
    }
  }, []);

  useEffect(() => {
    try {
      const tg = window.Telegram?.WebApp;
      if (tg) {
        setTgData(tg.initDataUnsafe?.user);
        tg.BackButton.onClick(() => location.href = '/');
        tg.BackButton.show();
        const mb = tg.MainButton;
        mb.enable();
        mb.setParams({ text: "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞" });
        mb.onClick(() => window.location.replace("/casino/free"));
        mb.show();
        const sb = tg.SecondaryButton;
        sb.enable();
        const curUser = users.find(u => u.tgId === window.Telegram?.WebApp.initDataUnsafe?.user.id);
        if (curUser === undefined || curUser.points === undefined || curUser.points < 100) {
          alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!");
          return;
        }
        sb.setParams({ text: `–ö—Ä—É—Ç–∏—Ç—å ($${curUser.casinoBet} –æ—á–∫–æ–≤)` });
        sb.onClick(async () => {
          try {
            setRes("...");
            setResColor("stone");
            sb.disable();
            setInt(rand_choices.map((choice, index) => (<div key={index} className={`h-[30vw] w-full bg-card rounded-3xl text-5xl flex items-center justify-center ${choice}`}><img src={`${choice}.png`} className="w-[60%]"></img></div>)));
            await new Promise(resolve => setTimeout(resolve, 2000));
            const newRandChoices = [symbols[Math.floor(Math.random() * 4)], symbols[Math.floor(Math.random() * 4)], symbols[Math.floor(Math.random() * 4)]];
            setInt(newRandChoices.map((choice, index) => (<div key={index} className={`h-[30vw] w-full bg-card rounded-3xl text-5xl flex items-center justify-center ${choice}`}><img src={`${choice}.png`} className="w-[60%]"></img></div>)));
            sb.enable();
            const curUser = users.find(u => u.tgId === window.Telegram?.WebApp.initDataUnsafe?.user.id);
            if (curUser === undefined || curUser.points === undefined || curUser.points < 100) {
              alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!");
              return;
            } else if (curUser.casinoBet > curUser.points) {
              alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤! –°–¥–µ–ª–∞–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É.");
              return;
            }
            const payoutKey = newRandChoices.join('')
            const payout = payouts[payoutKey] || 0
            if (payout <= 16) {
              setRes(`x0 (-${curUser.casinoBet}$)`);
              setResColor("red");
              curUser.points -= curUser.casinoBet;
              curUser.points_from.casino -= curUser.casinoBet;
            } else if (payout >= 17 && payout < 32) {
              setRes(`x0.5 (-${Math.floor(curUser.casinoBet / 2)}$)`);
              setResColor("red");
              curUser.points -= Math.floor(curUser.casinoBet / 2);
              curUser.points_from.casino -= Math.floor(curUser.casinoBet / 2);
            } else if (payout == 32) {
              setRes("x1 (=0$)");
              setResColor("stone");
            } else if (payout >= 33 && payout <= 48) {
              setRes(`x1.4 (+${Math.floor(curUser.casinoBet * 1.4 - curUser.casinoBet)}$)`);
              setResColor("green");
              curUser.points += Math.floor(curUser.casinoBet * 1.4 - curUser.casinoBet);
              curUser.points_from.casino += Math.floor(curUser.casinoBet * 1.4 - curUser.casinoBet);
            } else if (payout >= 49 && payout < 64) {
              setRes(`x1.8 (+${Math.floor(curUser.casinoBet * 1.8 - curUser.casinoBet)}$)`);
              setResColor("green");
              curUser.points += Math.floor(curUser.casinoBet * 1.8 - curUser.casinoBet);
              curUser.points_from.casino += Math.floor(curUser.casinoBet * 1.8 - curUser.casinoBet);
            } else {
              setRes(`—Ö5 (+${Math.floor(curUser.casinoBet * 5 - curUser.casinoBet)}$)`);
              setResColor("green");
              curUser.points += Math.floor(curUser.casinoBet * 5 - curUser.casinoBet);
              curUser.points_from.casino += Math.floor(curUser.casinoBet * 5 - curUser.casinoBet);
            }
            const response = await fetch('/api/save-user', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(curUser),
            })

            if (!response.ok) {
              const errorData = await response.json()
              throw new Error(errorData.error || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
            }
            const result = await response.json()
          } catch (e) {
            console.error(e);
          }
        });
        sb.show();
      }
    } catch (error) {
      console.error(error)
    }
  }, []);

  useEffect(() => {
    if (!tgData?.id) return

    const checkAndAddUser = async () => {
      const exists = users.some(u => u.tgId === tgData.id);
      if (!exists) {
        const response = await fetch('/api/add-user', {
          method: 'POST',
          body: JSON.stringify({
            tgId: tgData.id,
            tgNick: tgData.first_name,
            tgUsername: tgData.username,
            points: 0,
            lvl: 1,
            points_from: { rsp: 0, casino: 0, emoji: 0, distribute: 0, feud: 0 },
            casinoBet: 100,
            lastFreeCasino: 0,
            freeCasinoNow: false,
            freeCasinoProps: { done: 0, points: 0 }
          })
        })
        const newUser = await response.json()
        setUsers(prev => [...prev, newUser])
        setCurUser(newUser);
      } else {
        const foundUser = users.find(u => u.tgId === tgData?.id);
        if (foundUser) {
          setCurUser(foundUser);
        }
      }
    }

    checkAndAddUser()
  }, [tgData, users]);

  const betHandler = async (curUser: User, bet: number) => {
    if (bet < 100) {
      alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –∫–∞–∑–∏–Ω–æ: $100 –æ—á–∫–æ–≤!');
      return;
    }
    window.Telegram.WebApp.SecondaryButton.setParams({ text: `–ö—Ä—É—Ç–∏—Ç—å ($${bet} –æ—á–∫–æ–≤)` });
    const response = await fetch('/api/save-user', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        tgId: tgData.id,
        tgUsername: tgData.username,
        tgNick: tgData.first_name,
        points: curUser.points,
        lvl: curUser.lvl,
        points_from: curUser.points_from,
        casinoBet: bet
      }),
    });
    if (!response.ok) {
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏! ${response.statusText}`);
      return;
    }
    setCurUser(prev => ({
      tgId: prev.tgId,
      tgUsername: prev.tgUsername,
      tgNick: prev.tgNick,
      points: prev.points,
      lvl: prev.lvl,
      points_from: prev.points_from,
      casinoBet: bet,
      lastFreeCasino: prev.lastFreeCasino,
      freeCasinoNow: prev.freeCasinoNow,
      freeCasinoProps: prev.freeCasinoProps,
      rspProps: prev.rspProps
    }));
    curUser.casinoBet = bet;
    setUsers(prev => prev.map(u => u.tgId === curUser.tgId ? curUser : u));
  }

  return (
    <div id="root" className="overflow-hidden overflow-x-hidden overflow-y-hidden">
      <div role="region" aria-label="Notifications (F8)" tabIndex={-1} style={{ pointerEvents: "none" }}>
        <ol tabIndex={-1} className="fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]"></ol>
      </div>
      <section aria-label="Notifications alt+T" tabIndex={-1} aria-live="polite" aria-relevant="additions text" aria-atomic="false"></section>
      <div className="min-h-screen bg-background text-foreground dark overflow-hidden overflow-x-hidden overflow-y-hidden">
        <div className="flex items-center justify-center p-4 border-b border-border">
          <div className="flex items-center space-x-2">
            <h1 className="text-2xl font-bold cursor-pointer" onClick={() => alert(`–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑: ${tgData?.username ? `@${tgData.username} (id${tgData?.id})` : `${tgData?.first_name} (id${tgData?.id})`}`)}>
              <span className="text-foreground neumorph-glow"><b>SHIRU</b></span>
              <span className="text-primary ml-1 green-neumorph-glow"><b>BOT</b></span>
            </h1>
            <div className="w-2 h-2 bg-primary rounded-full animate-pulse green-neumorph-glow"></div>
          </div>
        </div>
        <div className="p-4">
          <div className="flex items-center justify-between mb-4"><span className="text-sm text-muted-foreground">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span><span className="text-sm font-medium"><span className="text-destructive">{curUser?.points}</span><span className="text-muted-foreground ml-1">–æ—á–∫–æ–≤</span></span>
          </div>
          <div className="grid grid-cols-3 gap-4 mb-6">
            <div className="rounded-lg border text-card-foreground shadow-sm bg-card border-border">
              <div className="p-3 text-center">
                <div className="text-lg font-bold text-primary">{users.find(u => u.tgId === tgData?.id)?.points}</div>
                <div className="text-xs text-muted-foreground">–û—á–∫–∏</div>
              </div>
            </div>
            <div className="rounded-lg border text-card-foreground shadow-sm bg-card border-border">
              <div className="p-3 text-center">
                <div className="text-lg font-bold text-yellow-400">{curUser?.lvl}</div>
                <div className="text-xs text-muted-foreground">–£—Ä–æ–≤–µ–Ω—å</div>
              </div>
            </div>
            <div className="rounded-lg border text-card-foreground shadow-sm bg-card border-border">
              <div className="p-3 text-center">
                <div className="text-lg font-bold text-secondary">#{users.sort((a, b) => b.points - a.points).findIndex(u => u.tgId === tgData?.id) + 1}</div>
                <div className="text-xs text-muted-foreground">–†–µ–π—Ç–∏–Ω–≥</div>
              </div>
            </div>
          </div>
          <h2 className="text-lg font-bold text-muted-foreground">–ö–ê–ó–ò–ù–û</h2>
          <div className="w-full max-w-xs mx-auto p-4 flex flex-col items-center justify-center">
            <div className="flex flex-col items-center w-screen px-3">
              <div className="flex w-full mx-4 space-x-3">
                {int}
              </div>
            </div>
            <div className="w-screen flex items-end justify-end mb-2">
              <div className={`font-semibold text-xl py-0.5 inline-flex items-center rounded-full border px-2.5 mt-2 mr-2 transition-colors focus:outline-none focus:ring-2 focus:ring-${resColor} focus:ring-offset-2 hover:bg-${resColor}/80 bg-${resColor}/10 text-${resColor} border-${resColor}/20`}>{res}</div>
            </div>
            <h3 className="text-lg font-bold text-muted-foreground">–°–¢–ê–í–ö–ê</h3>
            <div className="w-screen flex flex-col space-y-2">
              <div
                ref={scrollContainerRef}
                className="w-full flex overflow-x-auto items-center justify-between space-x-2 mx-1 scroll-smooth" // –¥–æ–±–∞–≤–ª–µ–Ω scroll-smooth –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
              >
                <div className="neumorph-glow flex-shrink-0 w-24 text-card-foreground shadow-sm bg-card p-3 text-center rounded-xl border border-border hover:border-primary/50 transition-colors cursor-pointer" onClick={() => betHandler(curUser, Math.floor(curUser.points / 5))}>
                  ${Math.floor(curUser.points / 5)}
                </div>
                <div className="neumorph-glow flex-shrink-0 w-24 text-card-foreground shadow-sm bg-card p-3 text-center rounded-xl border border-border hover:border-primary/50 transition-colors cursor-pointer" onClick={() => betHandler(curUser, (Math.floor(curUser.points / 4)))}>
                  ${Math.floor(curUser.points / 4)}
                </div>
                <div className="neumorph-glow flex-shrink-0 w-24 text-card-foreground shadow-sm bg-card p-3 text-center rounded-xl border border-border hover:border-primary/50 transition-colors cursor-pointer" onClick={() => betHandler(curUser, Math.floor(curUser.points / 3))}>
                  ${Math.floor(curUser.points / 3)}
                </div>
                <div className="neumorph-glow flex-shrink-0 w-24 text-card-foreground shadow-sm bg-card p-3 text-center rounded-xl border border-border hover:border-primary/50 transition-colors cursor-pointer" onClick={() => betHandler(curUser, Math.floor(curUser.points / 2))}>
                  ${Math.floor(curUser.points / 2)}
                </div>
                <div className="neumorph-glow flex-shrink-0 w-24 text-card-foreground shadow-sm bg-card p-3 text-center rounded-xl border border-border hover:border-primary/50 transition-colors cursor-pointer" onClick={() => betHandler(curUser, Math.floor(curUser.points))}>
                  ${Math.floor(curUser.points)}
                </div>
              </div>
              <form
                onSubmit={async (e) => {
                  e.preventDefault();
                  const target = e.target as HTMLFormElement;
                  const input = target.querySelector('input[type="number"]') as HTMLInputElement;
                  if (input.valueAsNumber > curUser.points) {
                    alert('–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞ —Å—á–µ—Ç—É!');
                    return;
                  } else if (input.valueAsNumber != Math.floor(input.valueAsNumber)) {
                    alert('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!');
                    return;
                  }
                  window.Telegram.WebApp.SecondaryButton.setParams({ text: `–ö—Ä—É—Ç–∏—Ç—å ($${input.valueAsNumber} –æ—á–∫–æ–≤)` });
                  const response = await fetch('/api/save-user', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                      tgId: tgData.id,
                      tgUsername: tgData.username,
                      tgNick: tgData.first_name,
                      points: curUser.points,
                      lvl: curUser.lvl,
                      points_from: curUser.points_from,
                      casinoBet: input.valueAsNumber
                    }),
                  });
                  if (!response.ok) {
                    alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏! ${response.statusText}`);
                    console.info(response, curUser);
                    return;
                  }
                  setCurUser(prev => ({
                    tgId: prev.tgId,
                    tgUsername: prev.tgUsername,
                    tgNick: prev.tgNick,
                    points: prev.points,
                    lvl: prev.lvl,
                    points_from: prev.points_from,
                    casinoBet: input.valueAsNumber,
                    lastFreeCasino: prev.lastFreeCasino,
                    freeCasinoNow: prev.freeCasinoNow,
                    freeCasinoProps: prev.freeCasinoProps,
                    rspProps: prev.rspProps
                  }));
                  curUser.casinoBet = input.valueAsNumber;
                  setUsers(prev => prev.map(u => u.tgId === curUser.tgId ? curUser : u));
                  input.value = '';
                }}
              >
                <div className="w-[calc(100%-4px)] border-primary mx-1 mt-1 text-center border-primary/50 focus:ring-2 focus:ring-primary/50 focus:ring-offset-2 space-x-1 flex flex-row justify-between">
                  <input
                    type="number"
                    max={curUser.points}
                    min={100}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É..."
                    className="hover:border-0 focus:border-0 focus:outline-none p-3 w-[59%] text-start bg-card rounded-xl shadow-sm"
                    style={{ padding: '0.75rem' }}
                  />
                  <input type="submit" value="–ü–æ—Å—Ç–∞–≤–∏—Ç—å" className="font-extrabold p-3 w-[39%] bg-primary text-card-foreground rounded-xl mr-1 shadow-sm border border-border border-primary/50 transition-colors cursor-pointer neumorph-glow" style={{ padding: '0.75rem' }} />
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}